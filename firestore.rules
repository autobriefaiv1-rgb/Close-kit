
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is a member of the organization.
    // It does this by reading the user's own profile document.
    function isOrgMember(orgId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == orgId;
    }

    // Users can only read and write to their own user document.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the organizations collection.
    match /organizations/{orgId} {
      // Any authenticated user can read organization details. This is needed
      // for the app to fetch the organization name and check subscription status
      // after a user logs in.
      allow read: if request.auth != null;

      // A user can create an organization, but only if they set themselves as the owner.
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      
      // A user can update an organization's details, but only if they are the owner.
      allow update: if request.auth != null && get(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == request.auth.uid;
    
	    // Any data specific to an organization (proposals, customers, etc.) can only be
      // accessed by members of that organization.
      match /{allSubcollections}/{docId} {
      	allow read, write: if request.auth != null && isOrgMember(orgId);
      }
    }
  }
}
