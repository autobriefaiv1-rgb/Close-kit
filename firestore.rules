/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data,
 *              with some denormalization for collaborative access to Proposals.
 *
 * Data Structure:
 * - All user-specific data (financial settings, materials, equipment, customers,
 *   proposals, line items, subscriptions, job costing data, and competitor prices)
 *   is nested under /users/{userId}.
 * - Proposals implement denormalized authorization, with a 'members' map on each
 *   document. This allows for efficient checks for collaborative access.
 * - Administrative roles are determined by the presence of a document in the
 *   /roles_admin/{userId} collection.
 * - Analytics data is stored in a top-level collection /analytics/{dataType}/{docId}.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Listing other users is explicitly denied.
 * - Public read access is not granted to any collections containing private user data.
 * - The rules use denormalization in the 'proposals' collection for authorization purposes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles, allowing only the user to read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user123' cannot create a profile for 'user456'.
     * @deny (get) User with ID 'user123' cannot read the profile of 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces access control for company financial settings, allowing only the associated user to manage them.
     * @path /users/{userId}/companyFinancialSettings/{companyFinancialSettingId}
     * @allow (create) User with ID 'user123' can create financial settings under their profile.
     * @allow (get) User with ID 'user123' can read financial settings under their profile.
     * @allow (update) User with ID 'user123' can update financial settings under their profile.
     * @allow (delete) User with ID 'user123' can delete financial settings under their profile.
     * @deny (create) User with ID 'user123' cannot create financial settings under the profile of 'user456'.
     * @deny (get) User with ID 'user123' cannot read financial settings under the profile of 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/companyFinancialSettings/{companyFinancialSettingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces access control for materials, allowing only the associated user to manage them.
     * @path /users/{userId}/materials/{materialId}
     * @allow (create) User with ID 'user123' can create materials under their profile.
     * @allow (get) User with ID 'user123' can read materials under their profile.
     * @allow (update) User with ID 'user123' can update materials under their profile.
     * @allow (delete) User with ID 'user123' can delete materials under their profile.
     * @deny (create) User with ID 'user123' cannot create materials under the profile of 'user456'.
     * @deny (get) User with ID 'user123' cannot read materials under the profile of 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/materials/{materialId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces access control for equipment, allowing only the associated user to manage them.
     * @path /users/{userId}/equipment/{equipmentId}
     * @allow (create) User with ID 'user123' can create equipment under their profile.
     * @allow (get) User with ID 'user123' can read equipment under their profile.
     * @allow (update) User with ID 'user123' can update equipment under their profile.
     * @allow (delete) User with ID 'user123' can delete equipment under their profile.
     * @deny (create) User with ID 'user123' cannot create equipment under the profile of 'user456'.
     * @deny (get) User with ID 'user123' cannot read equipment under the profile of 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/equipment/{equipmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces access control for customers, allowing only the associated user to manage them.
     * @path /users/{userId}/customers/{customerId}
     * @allow (create) User with ID 'user123' can create customers under their profile.
     * @allow (get) User with ID 'user123' can read customers under their profile.
     * @allow (update) User with ID 'user123' can update customers under their profile.
     * @allow (delete) User with ID 'user123' can delete customers under their profile.
     * @deny (create) User with ID 'user123' cannot create customers under the profile of 'user456'.
     * @deny (get) User with ID 'user123' cannot read customers under the profile of 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces access control for proposals, allowing only the associated user or a collaborator to manage them.
     *              Uses a denormalized 'members' map for efficient authorization.
     * @path /users/{userId}/proposals/{proposalId}
     * @allow (create) User with ID 'user123' can create proposals under their profile.
     * @allow (get) User with ID 'user123' can read proposals under their profile.
     * @allow (update) User with ID 'user123' can update proposals under their profile if they are the owner or a collaborator.
     * @allow (delete) User with ID 'user123' can delete proposals under their profile if they are the owner.
     * @deny (create) User with ID 'user123' cannot create proposals under the profile of 'user456'.
     * @deny (get) User with ID 'user123' cannot read proposals under the profile of 'user456' if they are not a collaborator.
     * @principle Enforces document ownership and collaborative access for proposals.
     */
    match /users/{userId}/proposals/{proposalId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isCollaborator(proposal) {
          return proposal.data.members[request.auth.uid] != null;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && (isOwner(userId) || isCollaborator(resource));
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isExistingOwner(userId) || isCollaborator(resource));
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for line items, allowing only the associated user to manage them.
     * @path /users/{userId}/proposals/{proposalId}/lineItems/{lineItemId}
     * @allow (create) User with ID 'user123' can create line items under their proposal.
     * @allow (get) User with ID 'user123' can read line items under their proposal.
     * @allow (update) User with ID 'user123' can update line items under their proposal.
     * @allow (delete) User with ID 'user123' can delete line items under their proposal.
     * @deny (create) User with ID 'user123' cannot create line items under the proposal of 'user456'.
     * @deny (get) User with ID 'user123' cannot read line items under the proposal of 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/proposals/{proposalId}/lineItems/{lineItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       allow get: if isSignedIn() && isOwner(userId);
       allow list: if false;
       allow create: if isSignedIn() && isOwner(userId);
       allow update: if isSignedIn() && isOwner(userId);
       allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces access control for subscriptions, allowing only the associated user to manage them.
     * @path /users/{userId}/subscriptions/{subscriptionId}
     * @allow (create) User with ID 'user123' can create subscriptions under their profile.
     * @allow (get) User with ID 'user123' can read subscriptions under their profile.
     * @allow (update) User with ID 'user123' can update subscriptions under their profile.
     * @allow (delete) User with ID 'user123' can delete subscriptions under their profile.
     * @deny (create) User with ID 'user123' cannot create subscriptions under the profile of 'user456'.
     * @deny (get) User with ID 'user123' cannot read subscriptions under the profile of 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/subscriptions/{subscriptionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces access control for job costing data, allowing only the associated user to manage it.
     * @path /users/{userId}/jobCostingData/{jobCostingDataId}
     * @allow (create) User with ID 'user123' can create job costing data under their profile.
     * @allow (get) User with ID 'user123' can read job costing data under their profile.
     * @allow (update) User with ID 'user123' can update job costing data under their profile.
     * @allow (delete) User with ID 'user123' can delete job costing data under their profile.
     * @deny (create) User with ID 'user123' cannot create job costing data under the profile of 'user456'.
     * @deny (get) User with ID 'user123' cannot read job costing data under the profile of 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/jobCostingData/{jobCostingDataId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces access control for competitor prices, allowing only the associated user to manage them.
     * @path /users/{userId}/competitorPrices/{competitorPriceId}
     * @allow (create) User with ID 'user123' can create competitor prices under their profile.
     * @allow (get) User with ID 'user123' can read competitor prices under their profile.
     * @allow (update) User with ID 'user123' can update competitor prices under their profile.
     * @allow (delete) User with ID 'user123' can delete competitor prices under their profile.
     * @deny (create) User with ID 'user123' cannot create competitor prices under the profile of 'user456'.
     * @deny (get) User with ID 'user123' cannot read competitor prices under the profile of 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/competitorPrices/{competitorPriceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
       /**
        * @description Allows admin users to read the document if their UID exists in this collection.
        * @path /roles_admin/{userId}
        */
    match /roles_admin/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }
        
        function isAdmin(userId) {
            return request.auth.uid == userId;
        }

        allow get: if isSignedIn() && isAdmin(userId);
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
    /**
     * @description Allows anyone to read the analytics data, but restricts writing.
     * @path /analytics/{dataType}/{docId}
     * @allow (get) Any user can read analytics data.
     * @deny (create) No one can create analytics data.
     * @deny (update) No one can update analytics data.
     * @deny (delete) No one can delete analytics data.
     * @principle Provides public read access while restricting write access.
     */
    match /analytics/{dataType}/{docId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}