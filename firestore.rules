/**
 * @fileoverview Firestore Security Rules for HVAC AI Pro.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for most data. Each user has a dedicated data tree under `/users/{userId}`.
 * Only the authenticated user can access their own data. Additionally, the presence of a document in `/roles_admin/{uid}` grants administrative privileges.
 *
 * Data Structure:
 * - /users/{userId}: Root for all user-specific data.
 * - /users/{userId}/companyFinancialSettings/{companyFinancialSettingId}: Financial settings for a company.
 * - /users/{userId}/materials/{materialId}: Materials data.
 * - /users/{userId}/equipment/{equipmentId}: Equipment data.
 * - /users/{userId}/customers/{customerId}: Customer data.
 * - /users/{userId}/proposals/{proposalId}: Proposals data.
 * - /users/{userId}/proposals/{proposalId}/lineItems/{lineItemId}: Line items for proposals.
 * - /users/{userId}/subscriptions/{subscriptionId}: Subscription data.
 * - /users/{userId}/jobCostingData/{jobCostingDataId}: Job costing data.
 * - /users/{userId}/competitorPrices/{competitorPriceId}: Competitor pricing data.
 * - /roles_admin/{userId}: Admin user IDs. Presence of a document grants admin access.
 * - /analytics/{dataType}/{docId}: Analytics data.
 *
 * Key Security Decisions:
 * - Strict user-ownership: All data under `/users/{userId}` is accessible only by the user.
 * - No user listing: Listing users is not permitted.
 * - Admin role: Defined by the existence of a document in `/roles_admin/{userId}`.
 * - Analytics data is readable by everyone.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication required for all protected paths.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ownership is verified using the userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the existing document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ownership and document existence are verified.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges.
     * @path N/A
     * @allow N/A
     * @deny N/A
     */
    function isAdmin() {
        return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) If the user is creating their own document.
     * @deny (create) If the user is not authenticated.
     * @deny (create) If the userId in the path does not match the authenticated user's ID.
     * @allow (get, list, update, delete) If the user is the owner.
     * @deny (get, list, update, delete) If the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/companyFinancialSettings/{companyFinancialSettingId} collection.
     * @path /users/{userId}/companyFinancialSettings/{companyFinancialSettingId}
     * @allow (create) If the user is the owner.
     * @deny (create) If the user is not the owner.
     * @allow (get, list, update, delete) If the user is the owner.
     * @deny (get, list, update, delete) If the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/companyFinancialSettings/{companyFinancialSettingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/materials/{materialId} collection.
     * @path /users/{userId}/materials/{materialId}
     * @allow (create) If the user is the owner.
     * @deny (create) If the user is not the owner.
     * @allow (get, list, update, delete) If the user is the owner.
     * @deny (get, list, update, delete) If the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/materials/{materialId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/equipment/{equipmentId} collection.
     * @path /users/{userId}/equipment/{equipmentId}
     * @allow (create) If the user is the owner.
     * @deny (create) If the user is not the owner.
     * @allow (get, list, update, delete) If the user is the owner.
     * @deny (get, list, update, delete) If the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/equipment/{equipmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/customers/{customerId} collection.
     * @path /users/{userId}/customers/{customerId}
     * @allow (create) If the user is the owner.
     * @deny (create) If the user is not the owner.
     * @allow (get, list, update, delete) If the user is the owner.
     * @deny (get, list, update, delete) If the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/customers/{customerId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/proposals/{proposalId} collection.
     * @path /users/{userId}/proposals/{proposalId}
     * @allow (create) If the user is the owner.
     * @deny (create) If the user is not the owner.
     * @allow (get, list, update, delete) If the user is the owner.
     * @deny (get, list, update, delete) If the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/proposals/{proposalId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/proposals/{proposalId}/lineItems/{lineItemId} collection.
     * @path /users/{userId}/proposals/{proposalId}/lineItems/{lineItemId}
     * @allow (create) If the user is the owner.
     * @deny (create) If the user is not the owner.
     * @allow (get, list, update, delete) If the user is the owner.
     * @deny (get, list, update, delete) If the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/proposals/{proposalId}/lineItems/{lineItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/subscriptions/{subscriptionId} collection.
     * @path /users/{userId}/subscriptions/{subscriptionId}
     * @allow (create) If the user is the owner.
     * @deny (create) If the user is not the owner.
     * @allow (get, list, update, delete) If the user is the owner.
     * @deny (get, list, update, delete) If the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/subscriptions/{subscriptionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/jobCostingData/{jobCostingDataId} collection.
     * @path /users/{userId}/jobCostingData/{jobCostingDataId}
     * @allow (create) If the user is the owner.
     * @deny (create) If the user is not the owner.
     * @allow (get, list, update, delete) If the user is the owner.
     * @deny (get, list, update, delete) If the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/jobCostingData/{jobCostingDataId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/competitorPrices/{competitorPriceId} collection.
     * @path /users/{userId}/competitorPrices/{competitorPriceId}
     * @allow (create) If the user is the owner.
     * @deny (create) If the user is not the owner.
     * @allow (get, list, update, delete) If the user is the owner.
     * @deny (get, list, update, delete) If the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/competitorPrices/{competitorPriceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     * @allow create: if isAdmin();
     * @allow get: if isAdmin();
     * @allow list: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @principle Only admins can manage admin roles.
     */
    match /roles_admin/{userId} {
       allow get: if isAdmin();
       allow list: if false; // No listing of admin roles.
       allow create: if isAdmin();
       allow update: if isAdmin();
       allow delete: if isAdmin();
    }

     /**
      * @description Rules for the /analytics/{dataType}/{docId} collection.
      * @path /analytics/{dataType}/{docId}
      * @allow get, list: if true;
      * @deny create, update, delete: if true;
      * @principle Data can be read by everyone, but only backend can write.
      */
    match /analytics/{dataType}/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /organizations collection.
     * @path /organizations/{organizationId}
     * @allow create: if isSignedIn() && request.auth.uid == request.resource.data.ownerId;
     * @allow get: if isSignedIn();
     * @allow list: if false;
     * @allow update: if isSignedIn() && request.auth.uid == resource.data.ownerId;
     * @allow delete: if isSignedIn() && request.auth.uid == resource.data.ownerId;
     */
    match /organizations/{organizationId} {
       allow get: if isSignedIn();
       allow list: if false;
       allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
       allow update: if isSignedIn() && request.resource.data.ownerId == resource.data.ownerId;
       allow delete: if isSignedIn() && request.auth.uid == resource.data.ownerId;
    }
  }
}