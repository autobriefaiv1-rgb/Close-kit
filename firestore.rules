rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own user profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the request is made by the user with matching {userId}.
     * @deny (get, create, update, delete) if the request is not made by the user with matching {userId}.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own customer data.
     * @path /users/{userId}/customers/{customerId}
     * @allow (get, create, update, delete) if the request is made by the user with matching {userId}.
     * @deny (get, create, update, delete) if the request is not made by the user with matching {userId}.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/customers/{customerId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own proposals.
     * @path /users/{userId}/proposals/{proposalId}
     * @allow (get, create, update, delete) if the request is made by the user with matching {userId}.
     * @deny (get, create, update, delete) if the request is not made by the user with matching {userId}.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/proposals/{proposalId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage line items associated with their proposals.
     * @path /users/{userId}/proposals/{proposalId}/lineItems/{lineItemId}
     * @allow (get, create, update, delete) if the request is made by the user with matching {userId}.
     * @deny (get, create, update, delete) if the request is not made by the user with matching {userId}.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/proposals/{proposalId}/lineItems/{lineItemId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their price book entries.
     * @path /users/{userId}/priceBookEntries/{priceBookEntryId}
     * @allow (get, create, update, delete) if the request is made by the user with matching {userId}.
     * @deny (get, create, update, delete) if the request is not made by the user with matching {userId}.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/priceBookEntries/{priceBookEntryId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their subscription data.
     * @path /users/{userId}/subscriptions/{subscriptionId}
     * @allow (get, create, update, delete) if the request is made by the user with matching {userId}.
     * @deny (get, create, update, delete) if the request is not made by the user with matching {userId}.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/subscriptions/{subscriptionId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their competitor price data.
     * @path /users/{userId}/competitorPrices/{competitorPriceId}
     * @allow (get, create, update, delete) if the request is made by the user with matching {userId}.
     * @deny (get, create, update, delete) if the request is not made by the user with matching {userId}.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/competitorPrices/{competitorPriceId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their job costing data.
     * @path /users/{userId}/jobCostingData/{jobCostingDataId}
     * @allow (get, create, update, delete) if the request is made by the user with matching {userId}.
     * @deny (get, create, update, delete) if the request is not made by the user with matching {userId}.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/jobCostingData/{jobCostingDataId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows access to proposal analytics data with authorization checks.
     * @path /proposalsAnalytics/{proposalAnalyticsId}
     * @allow (get, list) to authenticated users.
     * @deny (create, update, delete) to all users.
     * @principle Enforces authorization to prevent unauthorized access to sensitive data.
     */
    match /proposalsAnalytics/{proposalAnalyticsId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
    }
    /**
     * @description Indicates that a user has admin roles. Existence of the document implies admin role.
     * @path /roles_admin/{userId}
     * @allow (get, create, update, delete) if the request is made by an admin.
     * @deny (get, create, update, delete) if the request is not made by an admin.
     * @principle Enforces document ownership for writes.
     */
    match /roles_admin/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }

        // Placeholder function, replace with actual admin role validation logic
        function isAdmin() {
            return false; // TODO: Implement admin role check based on your actual role management system
        }
        allow get: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
      /**
       * @description Stores metadata for running asynchronous analysis jobs, such as competitor price analysis.  Security rules must prevent unauthorized job creation and access.
       * @path /analysis_jobs/{jobId}
       * @allow (get, create, update, delete) if the request is made by an admin.
       * @deny (get, create, update, delete) if the request is not made by an admin.
       * @principle Enforces document ownership for writes.
       */
    match /analysis_jobs/{jobId} {
        function isSignedIn() {
            return request.auth != null;
        }

        // Placeholder function, replace with actual admin role validation logic
        function isAdmin() {
            return false; // TODO: Implement admin role check based on your actual role management system
        }
        allow get: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
  }
}