{
  "entities": {
    "UserAccount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserAccount",
      "type": "object",
      "description": "Stores user account information, linked to authentication details managed externally (e.g., Supabase Auth).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user account."
        },
        "companyName": {
          "type": "string",
          "description": "Name of the user's company."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "signUpDate": {
          "type": "string",
          "description": "Date and time the user signed up.",
          "format": "date-time"
        },
        "stripeCustomerId": {
          "type": "string",
          "description": "Stripe Customer ID for managing subscriptions."
        }
      },
      "required": [
        "id",
        "companyName",
        "email",
        "firstName",
        "lastName",
        "signUpDate"
      ]
    },
    "Customer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Customer",
      "type": "object",
      "description": "Stores customer contact information and job history.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the customer."
        },
        "userAccountId": {
          "type": "string",
          "description": "Reference to UserAccount. (Relationship: UserAccount 1:N Customer)"
        },
        "firstName": {
          "type": "string",
          "description": "Customer's first name."
        },
        "lastName": {
          "type": "string",
          "description": "Customer's last name."
        },
        "email": {
          "type": "string",
          "description": "Customer's email address.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Customer's phone number."
        },
        "address": {
          "type": "string",
          "description": "Customer's address."
        }
      },
      "required": [
        "id",
        "userAccountId",
        "firstName",
        "lastName",
        "email",
        "phoneNumber"
      ]
    },
    "Proposal": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Proposal",
      "type": "object",
      "description": "Stores proposal data, including generated GBB options and customer information.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the proposal."
        },
        "userAccountId": {
          "type": "string",
          "description": "Reference to UserAccount. (Relationship: UserAccount 1:N Proposal)"
        },
        "customerId": {
          "type": "string",
          "description": "Reference to Customer. (Relationship: Customer 1:N Proposal)"
        },
        "dateCreated": {
          "type": "string",
          "description": "Date the proposal was created.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Status of the proposal (e.g., Draft, Sent, Accepted, Rejected)."
        },
        "goodOption": {
          "type": "string",
          "description": "The 'Good' option generated by the AI."
        },
        "betterOption": {
          "type": "string",
          "description": "The 'Better' option generated by the AI."
        },
        "bestOption": {
          "type": "string",
          "description": "The 'Best' option generated by the AI."
        }
      },
      "required": [
        "id",
        "userAccountId",
        "customerId",
        "dateCreated",
        "status",
        "goodOption",
        "betterOption",
        "bestOption"
      ]
    },
    "PriceBookEntry": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PriceBookEntry",
      "type": "object",
      "description": "Stores individual entries for materials and equipment costs managed by the contractor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the price book entry."
        },
        "userAccountId": {
          "type": "string",
          "description": "Reference to UserAccount. (Relationship: UserAccount 1:N PriceBookEntry)"
        },
        "name": {
          "type": "string",
          "description": "Name of the material or equipment."
        },
        "description": {
          "type": "string",
          "description": "Description of the material or equipment."
        },
        "cost": {
          "type": "number",
          "description": "Cost of the material or equipment."
        },
        "unit": {
          "type": "string",
          "description": "Unit of measurement for the material or equipment (e.g., each, feet, hours)."
        }
      },
      "required": [
        "id",
        "userAccountId",
        "name",
        "description",
        "cost",
        "unit"
      ]
    },
    "JobCostingData": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "JobCostingData",
      "type": "object",
      "description": "Stores job costing data for advanced calculation logic.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the job costing data."
        },
        "proposalId": {
          "type": "string",
          "description": "Reference to Proposal. (Relationship: Proposal 1:1 JobCostingData)"
        },
        "directCosts": {
          "type": "number",
          "description": "Direct costs associated with the job."
        },
        "indirectCosts": {
          "type": "number",
          "description": "Indirect costs associated with the job."
        },
        "fixedOverhead": {
          "type": "number",
          "description": "Fixed overhead costs associated with the job."
        }
      },
      "required": [
        "id",
        "proposalId",
        "directCosts",
        "indirectCosts",
        "fixedOverhead"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/userAccounts/{userAccountId}",
        "definition": {
          "entityName": "UserAccount",
          "schema": {
            "$ref": "#/backend/entities/UserAccount"
          },
          "description": "Stores user account information.  Path-based ownership for private user data.",
          "params": [
            {
              "name": "userAccountId",
              "description": "The unique identifier for the user account."
            }
          ]
        }
      },
      {
        "path": "/userAccounts/{userAccountId}/customers/{customerId}",
        "definition": {
          "entityName": "Customer",
          "schema": {
            "$ref": "#/backend/entities/Customer"
          },
          "description": "Stores customer data related to a user account. Path-based ownership enforces that only the user can access their customers.",
          "params": [
            {
              "name": "userAccountId",
              "description": "The unique identifier for the user account."
            },
            {
              "name": "customerId",
              "description": "The unique identifier for the customer."
            }
          ]
        }
      },
      {
        "path": "/userAccounts/{userAccountId}/proposals/{proposalId}",
        "definition": {
          "entityName": "Proposal",
          "schema": {
            "$ref": "#/backend/entities/Proposal"
          },
          "description": "Stores proposal data related to a user. Path-based ownership enforces that only the user can access their proposals.",
          "params": [
            {
              "name": "userAccountId",
              "description": "The unique identifier for the user account."
            },
            {
              "name": "proposalId",
              "description": "The unique identifier for the proposal."
            }
          ]
        }
      },
      {
        "path": "/userAccounts/{userAccountId}/proposals/{proposalId}/jobCostingData/{jobCostingDataId}",
        "definition": {
          "entityName": "JobCostingData",
          "schema": {
            "$ref": "#/backend/entities/JobCostingData"
          },
          "description": "Stores job costing data related to a proposal. Path-based ownership enforces that only the user can access their job costing data.",
          "params": [
            {
              "name": "userAccountId",
              "description": "The unique identifier for the user account."
            },
            {
              "name": "proposalId",
              "description": "The unique identifier for the proposal."
            },
            {
              "name": "jobCostingDataId",
              "description": "The unique identifier for the job costing data."
            }
          ]
        }
      },
      {
        "path": "/userAccounts/{userAccountId}/priceBookEntries/{priceBookEntryId}",
        "definition": {
          "entityName": "PriceBookEntry",
          "schema": {
            "$ref": "#/backend/entities/PriceBookEntry"
          },
          "description": "Stores price book entries related to a user account. Path-based ownership ensures that only the user can access their price book entries.",
          "params": [
            {
              "name": "userAccountId",
              "description": "The unique identifier for the user account."
            },
            {
              "name": "priceBookEntryId",
              "description": "The unique identifier for the price book entry."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure authorization independence, clarity, and scalability, adhering to the specified principles. Each collection is designed to have a homogeneous security posture, simplifying security rule creation and maintenance.  \n\nUser accounts are stored in `/userAccounts/{userAccountId}`. This path provides clear ownership.  \n\nCustomers, Proposals, PriceBookEntries are structured under the user's document (e.g., `/userAccounts/{userAccountId}/customers/{customerId}`). This reflects the one-to-many relationship between users and these entities and simplifies ownership-based security rules. The `JobCostingData` is structured as a subcollection of `proposals` as they are 1:1. This provides a structure for data needing higher security. \n\nThis design achieves Authorization Independence by avoiding `get()` calls in security rules. The structure supports required QAPs by using structural segregation based on ownership and clear path-based authorization."
  }
}