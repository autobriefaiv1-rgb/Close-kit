/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict organization-centric security model. Most data is scoped to an organization, and access is generally restricted to members of that organization. User profiles are an exception, as they are linked to both a user ID and an organization ID.
 *
 * Data Structure:
 * - /organizations/{organizationId}: Contains organization details.
 * - /organizations/{organizationId}/customers/{customerId}: Contains customer data for an organization.
 * - /organizations/{organizationId}/proposals/{proposalId}: Contains proposals for an organization.
 * - /organizations/{organizationId}/priceBookItems/{priceBookItemId}: Contains price book items for an organization.
 * - /users/{userId}: Contains user profile information.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - All write operations on organization-owned resources require the user to be authenticated and a member of the specified organization.
 * - User profiles can be created by the user themselves, but updates are restricted to the user's own profile.
 * - The ruleset does NOT validate data shapes beyond authorization-critical fields.
 *
 * Denormalization for Authorization:
 * The `organizationId` is denormalized onto every document within an organization's subcollections to simplify and optimize security rules. This avoids the need for expensive `get()` operations to verify organizational membership.
 *
 * Structural Segregation:
 * There is no public/private content segregation in this data model. All data is considered private and requires authentication and authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource (userId or organizationId matches).
     */
    function isOwner(resourceId) {
      return isSignedIn() && request.auth.uid == resourceId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and it exists.
     */
    function isExistingOwner(resourceId) {
      return isOwner(resourceId) && exists(/databases/$(database)/documents/organizations/$(resourceId));
    }

    /**
     * @description Checks if the authenticated user is a member of the organization.
     */
    function isOrgMember(organizationId) {
        return isSignedIn() && request.auth.token.organizationId == organizationId;
    }

    /**
     * @description Checks if the authenticated user is an admin of the organization.
     */
    function isOrgAdmin(organizationId) {
        return isOrgMember(organizationId) && request.auth.token.role == 'admin';
    }

    /**
     * @description Rules for the /organizations collection.
     * @path /organizations/{organizationId}
     * @allow (create) User with UID 'user_abc' can create an organization document where organizationId matches their UID.
     * @deny (create) User with UID 'user_def' cannot create an organization document with organizationId 'user_abc'.
     * @allow (get) User with UID 'user_abc' can get an organization document with organizationId 'user_abc'.
     * @deny (get) User with UID 'user_def' cannot get an organization document with organizationId 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update an organization document with organizationId 'user_abc'.
     * @deny (update) User with UID 'user_def' cannot update an organization document with organizationId 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete an organization document with organizationId 'user_abc'.
     * @deny (delete) User with UID 'user_def' cannot delete an organization document with organizationId 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /organizations/{organizationId} {
      allow get: if isOwner(organizationId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid && request.resource.data.id == organizationId;
      allow update: if isExistingOwner(organizationId);
      allow delete: if isExistingOwner(organizationId);
    }

    /**
     * @description Rules for the /organizations/{organizationId}/customers collection.
     * @path /organizations/{organizationId}/customers/{customerId}
     * @allow (create) User with orgId 'org_abc' can create a customer document under /organizations/org_abc/customers/.
     * @deny (create) User with orgId 'org_def' cannot create a customer document under /organizations/org_abc/customers/.
     * @allow (get) User with orgId 'org_abc' can get a customer document under /organizations/org_abc/customers/.
     * @deny (get) User with orgId 'org_def' cannot get the customer document for 'org_abc'.
     * @allow (update) User with orgId 'org_abc' can update a customer document under /organizations/org_abc/customers/.
     * @deny (update) User with orgId 'org_def' cannot update the customer document for 'org_abc'.
     * @allow (delete) User with orgId 'org_abc' can delete a customer document under /organizations/org_abc/customers/.
     * @deny (delete) User with orgId 'org_def' cannot delete the customer document for 'org_abc'.
     * @principle Organization members can manage customer data.
     */
    match /organizations/{organizationId}/customers/{customerId} {
      allow get: if isOrgMember(organizationId);
      allow list: if isOrgMember(organizationId);
      allow create: if isOrgMember(organizationId) && request.resource.data.organizationId == organizationId;
      allow update: if isOrgMember(organizationId) && request.resource.data.organizationId == organizationId;
      allow delete: if isOrgMember(organizationId) && request.resource.data.organizationId == organizationId;
    }

    /**
     * @description Rules for the /organizations/{organizationId}/proposals collection.
     * @path /organizations/{organizationId}/proposals/{proposalId}
     * @allow (create) User with orgId 'org_abc' can create a proposal document under /organizations/org_abc/proposals/.
     * @deny (create) User with orgId 'org_def' cannot create a proposal document under /organizations/org_abc/proposals/.
     * @allow (get) User with orgId 'org_abc' can get a proposal document under /organizations/org_abc/proposals/.
     * @deny (get) User with orgId 'org_def' cannot get the proposal document for 'org_abc'.
     * @allow (update) User with orgId 'org_abc' can update a proposal document under /organizations/org_abc/proposals/.
     * @deny (update) User with orgId 'org_def' cannot update the proposal document for 'org_abc'.
     * @allow (delete) User with orgId 'org_abc' can delete a proposal document under /organizations/org_abc/proposals/.
     * @deny (delete) User with orgId 'org_def' cannot delete the proposal document for 'org_abc'.
     * @principle Organization members can manage proposal data.
     */
    match /organizations/{organizationId}/proposals/{proposalId} {
      allow get: if isOrgMember(organizationId);
      allow list: if isOrgMember(organizationId);
      allow create: if isOrgMember(organizationId) && request.resource.data.organizationId == organizationId;
      allow update: if isOrgMember(organizationId) && request.resource.data.organizationId == organizationId;
      allow delete: if isOrgMember(organizationId) && request.resource.data.organizationId == organizationId;
    }

    /**
     * @description Rules for the /organizations/{organizationId}/priceBookItems collection.
     * @path /organizations/{organizationId}/priceBookItems/{priceBookItemId}
     * @allow (create) User with orgId 'org_abc' can create a price book item under /organizations/org_abc/priceBookItems/.
     * @deny (create) User with orgId 'org_def' cannot create a price book item under /organizations/org_abc/priceBookItems/.
     * @allow (get) User with orgId 'org_abc' can get a price book item under /organizations/org_abc/priceBookItems/.
     * @deny (get) User with orgId 'org_def' cannot get the price book item for 'org_abc'.
     * @allow (update) User with orgId 'org_abc' can update a price book item under /organizations/org_abc/priceBookItems/.
     * @deny (update) User with orgId 'org_def' cannot update the price book item for 'org_abc'.
     * @allow (delete) User with orgId 'org_abc' can delete a price book item under /organizations/org_abc/priceBookItems/.
     * @deny (delete) User with orgId 'org_def' cannot delete the price book item for 'org_abc'.
     * @principle Organization members can manage price book item data.
     */
    match /organizations/{organizationId}/priceBookItems/{priceBookItemId} {
      allow get: if isOrgMember(organizationId);
      allow list: if isOrgMember(organizationId);
      allow create: if isOrgMember(organizationId) && request.resource.data.organizationId == organizationId;
      allow update: if isOrgMember(organizationId) && request.resource.data.organizationId == organizationId;
      allow delete: if isOrgMember(organizationId) && request.resource.data.organizationId == organizationId;
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create a user document where userId matches their UID.
     * @deny (create) User with UID 'user_def' cannot create a user document with userId 'user_abc'.
     * @allow (get) User with UID 'user_abc' can get their own user document.
     * @deny (get) User with UID 'user_def' cannot get the user document for 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update their own user document.
     * @deny (update) User with UID 'user_def' cannot update the user document for 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete their own user document.
     * @deny (delete) User with UID 'user_def' cannot delete the user document for 'user_abc'.
     * @principle Enforces user-ownership for user profiles and restricts listing.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && request.resource.data.id == userId;
      allow delete: if isOwner(userId);
    }
  }
}